void SearchAndSortNews(Indexes* indexes, int num_results) {
    char* line = NULL;
    size_t len = 0;
    ssize_t read;
    read = getline(&line, &len, stdin);
    char** query_words = split_string(line);
    int query_size = len;
    qsort(indexes->words, *indexes->words_size, sizeof(InvertedIndex), compare_words);
    for(int i = 0; i < query_size; i++){
        InvertedIndex* word_index = bsearch(query_words[i], indexes->words, *indexes->words_size, sizeof(InvertedIndex), compare_words);
        if(word_index != NULL) {
            for(int j = 0; j < word_index->info_size; j++) {
                int document_index = word_index->info[j]->document_index;
                indexes->documents[document_index]->sum_tf_idf += word_index->info[j]->tf_idf;
            }
        }
    }
    qsort(indexes->documents, *indexes->documents_size, sizeof(ForwardIndex), compare_documents);
    //print the top num_results
    for(int i = 0; i < num_results; i++) {
        printf("%s, %f\n", indexes->documents[i]->name, indexes->documents[i]->sum_tf_idf);
    }
    for(int i = 0; i < query_size; i++){
        free(query_words[i]);
    }
    free(query_words);
    free(line);
}

int compare_words(const void* a, const void* b) {
    return strcmp(((InvertedIndex*)a)->word, ((InvertedIndex*)b)->word);
}

int compare_documents(const void* a, const void* b) {
    float sum_tf_idf_a = ((ForwardIndex*)a)->sum_tf_idf;
    float sum_tf_idf_b = ((ForwardIndex*)b)->sum_tf_idf;
    if (sum_tf_idf_a > sum_tf_idf_b) return -1;
    else if (sum_tf_idf_a < sum_tf_idf_b) return 1;
    return 0;
}

char** split_string(char* line){
    char** res  = NULL;
    char* p = strtok (line, " ");
    int n_spaces = 0, i;
    while (p) {
        res = realloc (res, sizeof (char*) * ++n_spaces);
        res[n_spaces-1] = p;
        p = strtok (NULL, " ");
    }
    res = realloc (res, sizeof (char*) * (n_spaces+1));
    res[n_spaces] = 0;
    return res;
}